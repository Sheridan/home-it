{% set ip_version = 'ipv'+item|string %}
{% set internal_interface = network|selectattr('ifname', 'match', 'internal_.*')|first %}
{% set external_interfaces = [] %}
{% for ext_if in network|selectattr('ifname', 'match', 'external_.*')|list %}
{% if ip_version in ext_if.ip %}
{{ external_interfaces.append(ext_if) }}
{% endif %}
{% endfor %}
{% set local_network = networks.home.subnet[ip_version]  %}

{% if ip_version == 'ipv4' %}
# Generated by Ansible
*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
# Masquerading
{% for external_interface in external_interfaces %}
-A POSTROUTING -o {{ external_interface.ifname }} -m comment --comment "Masquerading for {{ external_interface.name }} ({{ external_interface.ifname }})" -j MASQUERADE
{% endfor %}
COMMIT
# Generated by Ansible
{% endif %}
*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
COMMIT
# Generated by Ansible
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

# input
-A INPUT -i lo -j ACCEPT
-A INPUT -m conntrack --ctstate INVALID -j DROP
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment "RELATED and ESTABLISHED" -j ACCEPT
-A INPUT -p icmp -m comment --comment "Allow ICMP for {{ ip_version }}" -j ACCEPT
{% if ip_version == 'ipv6' %}
-A INPUT -p ipv6-icmp -j ACCEPT
{% endif %}
# to_host
{% for rule_name in iptables.to_host|list %}
{% set rule = iptables.to_host[rule_name]  %}
{% for protocol in ['tcp', 'udp'] %}
{% for rule_interface_name_part in rule.interfaces %}
{% for rule_interface in network|selectattr('ifname', 'match', '.*' + rule_interface_name_part + '.*')|list %}
-A INPUT -i {{ rule_interface.ifname }} -p {{ protocol }} {% if 'ports' in rule %} -m multiport --dports {{ rule.ports|join(',') }} {% endif %} -m comment --comment "[->{{ ansible_hostname }}] {{ rule.name }} [{{ protocol }}]" -j ACCEPT
{% endfor %}
{% endfor %}
{% endfor %}
{% endfor %}
-A INPUT -j DROP

# forward
{% if ip_version == 'ipv4' %}
# Masquerading forwards
{% for external_interface in external_interfaces %}
-A FORWARD -s {{ local_network.full }} -i {{ internal_interface.ifname }} -o {{ external_interface.ifname }} -m comment --comment "Forwarding net->internet for {{ external_interface.name }} ({{ external_interface.ifname }})" -j ACCEPT
-A FORWARD -d {{ local_network.full }} -i {{ external_interface.ifname }} -o {{ internal_interface.ifname }} -m comment --comment "Forwarding net<-internet for {{ external_interface.name }} ({{ external_interface.ifname }})" -j ACCEPT
{% endfor %}
{% endif %}
# -A FORWARD -j DROP

# output default
-A OUTPUT -m conntrack --ctstate RELATED,ESTABLISHED -m comment --comment "RELATED and ESTABLISHED" -j ACCEPT
-A OUTPUT -p icmp -m comment --comment "Allow ICMP for {{ ip_version }}" -j ACCEPT
{% if ip_version == 'ipv6' %}
-A OUTPUT -p ipv6-icmp -j ACCEPT
{% endif %}
{% for rule_name in iptables_global.host_to_internet|list %}
{% set rule = iptables_global.host_to_internet[rule_name]  %}
{% for external_interface in external_interfaces %}
{% for protocol in ['tcp', 'udp'] %}
-A OUTPUT -o {{ external_interface.ifname }} -s {{ local_network.full }} -p {{ protocol }} {% if 'ports' in rule %} -m multiport --dports {{ rule.ports|join(',') }} {% endif %} -m comment --comment "[network->internet] {{ rule.name }} [{{ protocol }}]" -j {{ rule.policy|default('ACCEPT') }}
{% endfor %}
{% endfor %}
{% endfor %}

# output per host
{% for host_name in query('inventory_hostnames', 'all')|difference(['gate'])|sort %}
{% set host = hostvars[host_name] %}
{% if 'iptables' in host %}
{% for host_internal_interface in host.network %}
{% for rule_name in host.iptables.host_to_internet %}
{% set rule = host.iptables.host_to_internet[rule_name]  %}
{% for external_interface in external_interfaces %}
{% for protocol in ['tcp', 'udp'] %}
-A OUTPUT -s {{ host_internal_interface.ip[ip_version].ip }} -o {{ external_interface.ifname }} -p {{ protocol }} {% if 'ports' in rule %} -m multiport --dports {{ rule.ports|join(',') }} {% endif %} -m comment --comment "[{{ host_name }}->internet] {{ rule.name }} [{{ protocol }}]" -j {{ rule.policy|default('ACCEPT') }}
{% endfor %}
{% endfor %}
{% endfor %}
{% endfor %}
{% endif %}
{% endfor %}
# -A OUTPUT -j REJECT --reject-with icmp-host-prohibited
COMMIT
# Generated by Ansible
