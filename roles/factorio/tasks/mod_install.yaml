---
  - name: Определяем переменные
    set_fact:
      target_version: 0
      login_key_file: "/tmp/factorio_login.key"
      module:
        name: "{{ mod.name }}"
        version: "{{ mod.version|default('latest') }}"
        json:
          url: "https://mods.factorio.com/api/mods/{{ mod.name }}/full"
          tmpfile: "/tmp/factorio_module_{{ mod.name }}.json"

  - name: Выкачиваем инфо
    get_url:
      url: "{{ module.json.url }}"
      dest: "{{ module.json.tmpfile }}"
      mode: 0644
      force: yes
    check_mode: no
    delegate_to: localhost

  - name: Вычитываем инфо
    set_fact:
      json_string: "{{lookup('file', module.json.tmpfile) }}"

  - name: Доступные версии
    debug:
      var: ver
    loop: "{{ json_string | json_query('releases[*].version') }}"
    loop_control:
      loop_var: ver

  - name: Устанавливаем целевую версию
    set_fact:
      target_version: "{{ module.version }}"
    when: module.version != 'latest'

  - name: Определяем целевую версию
    set_fact:
      target_version: "{{ ver }}"
    loop: "{{ json_string | json_query('releases[*].version') }}"
    loop_control:
      loop_var: ver
    when: module.version == 'latest' and target_version is version(ver, '<=')

  - name: Определяем целевой релиз
    set_fact:
      target_release: "{{ release }}"
      target_filepath: "{{ merged_vars.factorio.paths.home }}/mods/{{ release.file_name }}"
    loop: "{{ json_string | json_query('releases[*]') }}"
    loop_control:
      loop_var: release
    when: release.version is version(target_version, '==')

  - name: Проверяем есть ли уже ключ
    stat:
      path: "{{ login_key_file }}"
    register: stat_key_result
    delegate_to: localhost

  - name: Логинимся...
    uri:
      url: https://auth.factorio.com/api-login
      method: POST
      return_content: yes
      body_format: form-urlencoded
      body:
      - [ username, "{{ merged_vars.factorio.server.auth.login }}" ]
      - [ password, "{{ merged_vars.factorio.server.auth.password }}" ]
    register: login
    check_mode: no
    when: stat_key_result.stat.exists == False
    delegate_to: localhost

  - name: Сохраняем ключик
    copy:
      content: "{{ login.content|regex_replace('[^a-z0-9]', '') }}"
      dest: "{{ login_key_file }}"
    delegate_to: localhost
    check_mode: no
    when: stat_key_result.stat.exists == False

  - name: Выкачиваем мод
    get_url:
      url: "https://mods.factorio.com/{{ target_release.download_url }}?username={{ merged_vars.factorio.server.auth.login }}&token={{ lookup('file', login_key_file) }}"
      dest: "{{ target_filepath }}"
      checksum: "sha1:{{ target_release.sha1 }}"
      mode: 0644
      owner: "{{ merged_vars.factorio.user.name }}"
      group: "{{ merged_vars.factorio.user.name }}"
    register: download_status
    notify:
    - restart factorio

  - name: Ищем старые релизы
    find:
      paths: "{{ merged_vars.factorio.paths.home }}/mods/"
      patterns: "{{ module.name }}*.zip"
    register: all_versions

  - name: Подчищаем старые релизы
    file:
      path: "{{ file.path }}"
      state: absent
    loop: "{{ all_versions.files }}"
    loop_control:
      loop_var: file
    when: file.path != target_filepath

  - name: Подчищаем временные файлы
    file:
      path: "{{ module.json.tmpfile }}"
      state: absent
    delegate_to: localhost
