mqtt:
  server: tcp://localhost:{{ mqtt_exporter_mqtt_port }}
  user: {{ mqtt_users.exporter.login }}
  password: {{ mqtt_users.exporter.pw }}
  # The Topic path to subscribe to. Be aware that you have to specify the wildcard.
  topic_path: homed/fd/zigbee/+
  # Optional: Regular expression to extract the device ID from the topic path. The default regular expression, assumes
  # that the last "element" of the topic_path is the device id.
  # The regular expression must contain a named capture group with the name deviceid
  # For example the expression for tasamota based sensors is "tele/(?P<deviceid>.*)/.*"
  # device_id_regex: "(.*/)?(?P<deviceid>.*)"
  # The MQTT QoS level
  qos: 1
cache:
  # Timeout. Each received metric will be presented for this time if no update is send via MQTT.
  # Set the timeout to -1 to disable the deletion of metrics from the cache. The exporter presents the ingest timestamp
  # to prometheus.
  timeout: 5m
metrics:
  - prom_name: zigbee_device_power
    mqtt_name: power
    help: "Current consumption (W)"
    type: gauge
  - prom_name: zigbee_device_voltage
    mqtt_name: voltage
    help: "Current voltage (V)"
    type: gauge
  - prom_name: zigbee_device_current
    mqtt_name: current
    help: "Current (A)"
    type: gauge
  - prom_name: zigbee_device_energy
    mqtt_name: energy
    help: "Power Consumption (kWh)"
    type: counter
  - prom_name: zigbee_device_battery_percent
    mqtt_name: battery
    help: "Battery percent (%)"
    type: gauge
  - prom_name: zigbee_device_temperature
    mqtt_name: temperature
    help: "Temperature (C)"
    type: gauge
  - prom_name: zigbee_device_humidity
    mqtt_name: humidity
    help: "Humidity (%)"
    type: gauge
  - prom_name: zigbee_device_link_quality
    mqtt_name: linkQuality
    help: "Link Quality"
    type: gauge
  # - prom_name: zigbee_device_last_seen
  #   mqtt_name: lastSeen
  #   help: "Last Seen"
  #   type: gauge
  - prom_name: zigbee_device_status
    mqtt_name: status
    help: "Device status (on/off)"
    type: gauge
    string_value_mapping:
      map:
        off: 0
        on: 1
      error_value: 2

  # -
  #   # The name of the metric in prometheus
  #   prom_name: temperature
  #   # The name of the metric in a MQTT JSON message
  #   mqtt_name: temperature
  #   # The prometheus help text for this metric
  #   help: DHT22 temperature reading
  #   # The prometheus type for this metric. Valid values are: "gauge" and "counter"
  #   type: gauge
  #   # A map of string to string for constant labels. This labels will be attached to every prometheus metric
  #   const_labels:
  #     sensor_type: dht22
  # -
  #   # The name of the metric in prometheus
  #   prom_name: humidity
  #   # The name of the metric in a MQTT JSON message
  #   mqtt_name: humidity
  #   # The prometheus help text for this metric
  #   help: DHT22 humidity reading
  #   # The prometheus type for this metric. Valid values are: "gauge" and "counter"
  #   type: gauge
  #   # A map of string to string for constant labels. This labels will be attached to every prometheus metric
  #   const_labels:
  #     sensor_type: dht22
  # -
  #   # The name of the metric in prometheus
  #   prom_name: heat_index
  #   # The name of the metric in a MQTT JSON message
  #   mqtt_name: heat_index
  #   # The prometheus help text for this metric
  #   help: DHT22 heatIndex calculation
  #   # The prometheus type for this metric. Valid values are: "gauge" and "counter"
  #   type: gauge
  #   # A map of string to string for constant labels. This labels will be attached to every prometheus metric
  #   const_labels:
  #     sensor_type: dht22
  # -
  #   # The name of the metric in prometheus
  #   prom_name: state
  #   # The name of the metric in a MQTT JSON message
  #   mqtt_name: state
  #   # Regular expression to only match sensors with the given name pattern
  #   sensor_name_filter: "^.*-light$"
  #   # The prometheus help text for this metric
  #   help: Light state
  #   # The prometheus type for this metric. Valid values are: "gauge" and "counter"
  #   type: gauge
  #   # A map of string to string for constant labels. This labels will be attached to every prometheus metric
  #   const_labels:
  #     sensor_type: ikea
  #   # When specified, enables mapping between string values to metric values.
  #   string_value_mapping:
  #     # A map of string to metric value.
  #     map:
  #       off: 0
  #       low: 0
  #     # Metric value to use if a match cannot be found in the map above.
  #     # If not specified, parsing error will occur.
  #     error_value: 1
